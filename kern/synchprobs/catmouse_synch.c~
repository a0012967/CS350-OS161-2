#include <types.h>
#include <lib.h>
#include <synchprobs.h>
#include <synch.h>
#include <wchan.h>

/* 
 * This simple default synchronization mechanism allows only creature at a time to
 * eat.   The globalCatMouseSem is used as a a lock.   We use a semaphore
 * rather than a lock so that this code will work even before locks are implemented.
 */

/* 
 * Replace this default synchronization mechanism with your own (better) mechanism
 * needed for your solution.   Your mechanism may use any of the available synchronzation
 * primitives, e.g., semaphores, locks, condition variables.   You are also free to 
 * declare other global variables if your solution requires them.
 */

/*
 * replace this with declarations of any synchronization and other variables you need here
 */
 //static int eatingUpdate(void);
 //static void wakeCats(void);
// static void wakeMice(void);
static void wakeAll(void);
 
volatile int curFeeder=0;
volatile int numEaters=0;
struct lock *numLock;
volatile int numBowls;
struct lock *switchLock;

struct theBowl {
    struct lock *bowlLock;
    struct cv *noFeedCv;
    struct cv *waitCv;
    volatile int thisFeeder;
    volatile int bowlNum;
};

struct theBowl *theBowls;

/* 
 * The CatMouse simulation will call this function once before any cat or
 * mouse tries to each.
 *
 * You can use it to initialize synchronization and other variables.
 * 
 * parameters: the number of bowls
 */
void
catmouse_sync_init(int bowls)
{
    //kprintf("Initializing catmouse\n");
    numBowls=bowls;
    const char* str;
    switchLock=lock_create("switchLock");
    numLock=lock_create("numLock");
    theBowls=kmalloc(bowls * sizeof(struct theBowl));//allocate enough memory for all bowls
    for (int i=0; i<bowls; i++) {
        str = "bowlLock" +i;
        theBowls[i].bowlLock=lock_create(str);
        //kprintf("created the lock at %u\n", i);
        if(theBowls[i].bowlLock == NULL) {
            panic("Could not create global CatMouse lock");
        }
        str = "waitCV" + i;
        theBowls[i].waitCv=cv_create(str);
        //kprintf("created the cv at %u\n", i);
        if(theBowls[i].waitCv==NULL) {
            panic("Could not create our required CV for CatMouse");
        }
        theBowls[i].thisFeeder=0;
        theBowls[i].bowlNum=i+1;
    }
    //kprintf("Done initializing catmouse \n");
  return;
}

/* 
 * The CatMouse simulation will call this function once after all cat
 * and mouse simulations are finished.
 *
 * You can use it to clean up any synchronization and other variables.
 *
 * parameters: the number of bowls
 */
void
catmouse_sync_cleanup(int bowls)
{
    //kprintf("Cleaning up catmouse\n");
    for(int i=bowls-1; i>=0; i--) {
        lock_destroy(theBowls[i].bowlLock);
        cv_destroy(theBowls[i].waitCv);
        //kfree(theBowls[bowls-1]);
    }

}


/*
 * The CatMouse simulation will call this function each time a cat wants
 * to eat, before it eats.
 * This function should cause the calling thread (a cat simulation thread)
 * to block until it is OK for a cat to eat at the specified bowl.
 *
 * parameter: the number of the bowl at which the cat is trying to eat
 *             legal bowl numbers are 1..NumBowls
 *
 * return value: none
 */

void
cat_before_eating(unsigned int bowl) 
{
    //kprintf("Cat before eating\n");
    lock_acquire(switchLock);
    //kprintf("Cat grabbed switch lock\n");
    if(curFeeder==0) {
        curFeeder=1;
    }
    while(curFeeder!=1 ||theBowls[bowl-1].thisFeeder!=0){
        if(numEaters!=0){
            cv_wait(theBowls[bowl-1].waitCv, switchLock);
        } else {
            curFeeder=1;
        }
    }
    theBowls[bowl-1].thisFeeder=1;
    numEaters++;
    lock_release(switchLock);
}

/*
 * The CatMouse simulation will call this function each time a cat finishes
 * eating.
 *
 * You can use this function to wake up other creatures that may have been
 * waiting to eat until this cat finished.
 *
 * parameter: the number of the bowl at which the cat is finishing eating.
 *             legal bowl numbers are 1..NumBowls
 *
 * return value: none
 */

void
cat_after_eating(unsigned int bowl) 
{
    //kprintf("Cat after eating before\n");
    lock_acquire(switchLock);
    //kprintf("Cat after eating after\n");
    numEaters--;
    theBowls[bowl-1].thisFeeder=0;
    cv_signal(theBowls[bowl-1].waitCv, switchLock);
    
    //kprintf("Cat releasing lock\n");
    lock_release(switchLock);
    wakeAll();
}

/*
 * The CatMouse simulation will call this function each time a mouse wants
 * to eat, before it eats.
 * This function should cause the calling thread (a mouse simulation thread)
 * to block until it is OK for a mouse to eat at the specified bowl.
 *
 * parameter: the number of the bowl at which the mouse is trying to eat
 *             legal bowl numbers are 1..NumBowls
 *
 * return value: none
 */

void
mouse_before_eating(unsigned int bowl) 
{
    //kprintf("Mouse before eating\n");
    lock_acquire(switchLock);
    //kprintf("Mouse grabbed switch lock\n");
    if(curFeeder==0) {
        curFeeder=2;
    }
    while(curFeeder!=2 ||theBowls[bowl-1].thisFeeder!=0){
        if(numEaters!=0){
            cv_wait(theBowls[bowl-1].waitCv, switchLock);
        } else {
            curFeeder=2;
        }
    }
    theBowls[bowl-1].thisFeeder=2;
    numEaters++;
    lock_release(switchLock);
}

/*
 * The CatMouse simulation will call this function each time a mouse finishes
 * eating.
 *
 * You can use this function to wake up other creatures that may have been
 * waiting to eat until this mouse finished.
 *
 * parameter: the number of the bowl at which the mouse is finishing eating.
 *             legal bowl numbers are 1..NumBowls
 *
 * return value: none
 */

void
mouse_after_eating(unsigned int bowl) 
{
    //kprintf("Mouse after eating before\n");
    lock_acquire(switchLock);
    //kprintf("Mouse after eating after\n");
    numEaters--;
    theBowls[bowl-1].thisFeeder=0;
    cv_signal(theBowls[bowl-1].waitCv, switchLock);
    
    //kprintf("Mouse releasing lock\n");
    lock_release(switchLock);
    wakeAll();
}

/*int eatingUpdate(){
   // kprintf("Eating update running\n");
    int eatCount=0;
    for(int i=0; i<numBowls; i++) {
        if(theBowls[i].thisFeeder != 0) {
            eatCount++;
            anyEating=theBowls[i].thisFeeder;
        }
    }
    if(eatCount ==0) {
        anyEating=0;
    }
    return eatCount;
}*/

/*void wakeCats() {
    kprintf("Attempting to wake all cats\n");
    for (int i=0; i<numBowls; i++) {
        //lock_acquire(theBowls[i].bowlLock);
        //cv_signal(theBowls[i].bowlCatCv, theBowls[i].bowlLock);
        cv_signal(theBowls[i].bowlCatCv, switchLock);
        //lock_release(theBowls[i].bowlLock);
    }
}

void wakeMice() {
    kprintf("Attempting to wake all mice\n");
    for (int i=0; i<numBowls; i++) {
        //lock_acquire(theBowls[i].bowlLock);
        //cv_signal(theBowls[i].bowlMouseCv, theBowls[i].bowlLock);
        cv_signal(theBowls[i].bowlMouseCv, switchLock);
        //lock_release(theBowls[i].bowlLock);
    }
}*/

void wakeAll(){
 //kprintf("Attempting to wake all \n");
    for (int i=0; i<numBowls; i++) {
        lock_acquire(switchLock);
            cv_broadcast(theBowls[i].waitCv, switchLock);
        lock_release(switchLock);
    }
}




